knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
setwd("E:/University/Doing Data Science/Unit 10")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
library(dplyr) # Heavy use of this library
library(tidyr)
library(plyr)
library(ggthemes) # for themes in ggplot
library(knitr)
library(kableExtra) # library to make the document more presentable
library(stringr)
library(caret)
# Read in beer and breweries data set using _csv for more tidy output
Beers <- read_csv('Beers.csv', col_types = cols())
Breweries <- read_csv('Breweries.csv', col_types = cols())
# Read in beer and breweries data set using _csv for more tidy output
Beers <- read_csv('Beers.csv', col_types = cols())
Breweries <- read_csv('Breweries.csv', col_types = cols())
BrewPub <- merge(Beers, Breweries, by.x = "Brewery_id", by.y = "Brew_ID", all = TRUE)
# Change variable names to more meaningful title
BrewPub <- rename(BrewPub, c("Name.x"="Beer","Name.y"="Brewery",
"Ounces"="OZ"))
# Used kable library to make document more presentable
kable(BrewPub %>%
head()) %>%
kable_styling("striped", full_width = F)
kable(BrewPub %>%
tail()) %>%
kable_styling("striped", full_width = F)
BrewPub$State <- str_trim(BrewPub$State,side = c ("both"))
kable(BrewPub %>% str())
beerCOTX <- BrewPub %>% filter(State == "CO" | State == "TX" ) %>% drop_na()
kable(beerCOTX %>% head())
beerTX <- BrewPub %>% filter( State == "TX" ) %>% drop_na()
kable(beerTX %>% head())
#create a training and test set for beerTX
train_perc = .6
train_indices = sample(seq(1,length(beerTX),by = 1), train_perc*length(beerTX))
TrainingTX = beerTX[train_indices,]
TestTX = beerTX[-train_indices,]
# summary of TrainingTX and TestTX
summary(TrainingTX)
summary(TestTX)
#Fit the TrainingTX Model
TrainingTX_Model = lm(ABV~IBU, data = TrainingTX)
#checking parameter values (intercept and slope).
summary(TrainingTX_Model)
# predictions of the model on TrainingTX
predsTrainingTX = predict(TrainingTX_Model)
TrainingTX$preds <- predsTrainingTX
kable(head(TrainingTX))
# predictions of the model on TestTX
predsTestTX = predict(TrainingTX_Model, newdata = TestTX)
TestTX$preds <- predsTestTX
kable(head(TestTX))
# Calculation of the ASE for the training set
ASEholderTrainainingTX = sum((predsTrainingTX - TrainingTX$ABV)^2)/(length(TrainingTX$ABV))
# Calculation of the ASE for the Test set
ASEholderTestTX = sum((predsTestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
ASEholderTrainainingTX
ASEholderTestTX
#Fit a KNN regression model for TrainingTX (K=3)
TrainingTX_KNN3 <- knnreg(ABV~IBU,data = TrainingTX, k=3)
summary(TrainingTX_KNN3)
#Fit a KNN regression model for TrainingTX (K=5)
TrainingTX_KNN5 = knnreg(ABV~IBU,data = TrainingTX, k=5)
summary(TrainingTX_KNN5)
# predictions of the model on TestTX for (K=3)
preds_KNN3_TestTX <- predict(TrainingTX_KNN3, TestTX)
TestTX$KNN3preds <- preds_KNN3_TestTX
kable(head(TestTX))
# predictions of the model on TestTX for (K=5)
preds_KNN5_TestTX = predict(TrainingTX_KNN5, TestTX)
TestTX$KNN5preds <- preds_KNN5_TestTX
kable(head(TestTX))
# Calculation of the ASE for the test set and K=3
ASE_KNN3_TestTX = sum((preds_KNN3_TestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
# Calculation of the ASE for the test set and K=5
ASE_KNN5_TestTX = sum((preds_KNN5_TestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
ASE_KNN3_TestTX
ASE_KNN5_TestTX
View(beerCOTX)
View(beerCOTX)
beerTX_American <- beerCOTX %>% filter( State == "TX" & Style == "American IPA" | Style == "American Pale Ale") %>% drop_na()
kable(beerTX_American %>% head())
View(beerTX_American)
View(beerTX_American)
beerTX_American <- beerCOX %>% filter( Style == "American IPA" | Style == "American Pale Ale") %>% drop_na()
beerTX_American <- beerTX %>% filter( Style == "American IPA" | Style == "American Pale Ale") %>% drop_na()
kable(beerTX_American %>% head())
View(beerTX_American)
View(beerTX_American)
View(beerCOTX)
View(beerCOTX)
beerTX_American <- beerCOTX %>% filter( State == "TX" & Style == "American IPA" | Style == "AAmerican Pale Ale (APA)") %>% drop_na()
kable(beerTX_American %>% head())
beerTX_American <- beerTX %>% filter( Style == "American IPA" | Style == "AAmerican Pale Ale (APA)") %>% drop_na()
kable(beerTX_American %>% head())
View(beerTX_American)
View(beerTX_American)
View(beerCOTX)
View(beerCOTX)
View(beerTX)
View(beerTX)
beerTX_American <- beerTX %>% filter( Style == "American IPA" | Style == "American Pale Ale (APA)") %>% drop_na()
kable(beerTX_American %>% head())
View(beerTX_American)
View(beerTX_American)
#create a training and test set for beerTX
train_perc = .6
train_indices = sample(seq(1,length(beerTX_American),by = 1), train_perc*length(beerTX_American))
TrainingTX_American = beerTX_American[train_indices,]
TestTX_American = beerTX_American[-train_indices,]
# summary of TrainingTX and TestTX
summary(TrainingTX_American)
summary(TestTX_American)
View(TrainingTX_American)
# KNN using the Class package
result = class::knn(TrainingTX_American[,c(4,5)],TestTX_American[,c(4,5)],TrainingTX_American$Style,k=3)
TestTX_American$StylePred = result
confusionMatrix(table(TestTX_American$Style,TestTX_American$StylePred))
TestTX_American
#create a training and test set for beerTX
seed = 7
train_perc = .6
train_indices = sample(seq(1,length(beerTX),by = 1), train_perc*length(beerTX))
TrainingTX = beerTX[train_indices,]
TestTX = beerTX[-train_indices,]
# summary of TrainingTX and TestTX
summary(TrainingTX)
summary(TestTX)
#Fit the TrainingTX Model
TrainingTX_Model = lm(ABV~IBU, data = TrainingTX)
#checking parameter values (intercept and slope).
summary(TrainingTX_Model)
# predictions of the model on TrainingTX
predsTrainingTX = predict(TrainingTX_Model)
TrainingTX$preds <- predsTrainingTX
kable(head(TrainingTX))
# predictions of the model on TestTX
predsTestTX = predict(TrainingTX_Model, newdata = TestTX)
TestTX$preds <- predsTestTX
kable(head(TestTX))
# Calculation of the ASE for the training set
ASEholderTrainainingTX = sum((predsTrainingTX - TrainingTX$ABV)^2)/(length(TrainingTX$ABV))
# Calculation of the ASE for the Test set
ASEholderTestTX = sum((predsTestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
ASEholderTrainainingTX
ASEholderTestTX
ASEholderTrainainingTX
ASEholderTestTX
#Fit a KNN regression model for TrainingTX (K=3)
TrainingTX_KNN3 <- knnreg(ABV~IBU,data = TrainingTX, k=3)
summary(TrainingTX_KNN3)
#Fit a KNN regression model for TrainingTX (K=5)
TrainingTX_KNN5 = knnreg(ABV~IBU,data = TrainingTX, k=5)
summary(TrainingTX_KNN5)
# predictions of the model on TestTX for (K=3)
preds_KNN3_TestTX <- predict(TrainingTX_KNN3, TestTX)
TestTX$KNN3preds <- preds_KNN3_TestTX
kable(head(TestTX))
# predictions of the model on TestTX for (K=5)
preds_KNN5_TestTX = predict(TrainingTX_KNN5, TestTX)
TestTX$KNN5preds <- preds_KNN5_TestTX
kable(head(TestTX))
# Calculation of the ASE for the test set and K=3
ASE_KNN3_TestTX = sum((preds_KNN3_TestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
# Calculation of the ASE for the test set and K=5
ASE_KNN5_TestTX = sum((preds_KNN5_TestTX - TestTX$ABV)^2)/(length(TestTX$ABV))
ASE_KNN3_TestTX
ASE_KNN5_TestTX
#create a training and test set for beerTX
seed = 7
train_perc = .6
train_indices = sample(seq(1,length(beerTX_American),by = 1), train_perc*length(beerTX_American))
TrainingTX_American = beerTX_American[train_indices,]
TestTX_American = beerTX_American[-train_indices,]
# summary of TrainingTX and TestTX
summary(TrainingTX_American)
summary(TestTX_American)
# KNN (k=3) using the Class package
resultK3 = class::knn(TrainingTX_American[,c(4,5)],TestTX_American[,c(4,5)],TrainingTX_American$Style,k=3)
TestTX_American$StylePred = resultK3
confusionMatrix(table(TestTX_American$Style,TestTX_American$StylePred))
# KNN (k=5) using the Class package
resultK5 = class::knn(TrainingTX_American[,c(4,5)],TestTX_American[,c(4,5)],TrainingTX_American$Style,k=5)
TestTX_American$StylePred = resultK5
confusionMatrix(table(TestTX_American$Style,TestTX_American$StylePred))
NewTx <- data.frame(IBU=c(150,170,190))
predict(TrainingTX_KNN5, NewTx)
?knn.cv
